// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  RESULT
  ERROR
}

model Message {
  id String @id @default(uuid())
  role MessageRole
  type MessageType
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fragment Fragment?
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Fragment {
  id String @id @default(uuid())
  messageId String @unique
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  sandboxUrl String
  title String
  files Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  posts Post[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String?
  published Boolean @default(false)
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}